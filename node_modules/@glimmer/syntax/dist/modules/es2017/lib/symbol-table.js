var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
};

var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
};

var _hasEval;

import { dict } from '@glimmer/util';
import { isUpperCase } from './utils';
export class SymbolTable {
  static top(locals, customizeComponentName) {
    return new ProgramSymbolTable(locals, customizeComponentName);
  }

  child(locals) {
    let symbols = locals.map(name => this.allocate(name));
    return new BlockSymbolTable(this, locals, symbols);
  }

}
export class ProgramSymbolTable extends SymbolTable {
  constructor(templateLocals, customizeComponentName) {
    super();
    this.templateLocals = templateLocals;
    this.customizeComponentName = customizeComponentName;
    this.symbols = [];
    this.upvars = [];
    this.size = 1;
    this.named = dict();
    this.blocks = dict();
    this.usedTemplateLocals = [];

    _hasEval.set(this, false);
  }

  getUsedTemplateLocals() {
    return this.usedTemplateLocals;
  }

  setHasEval() {
    __classPrivateFieldSet(this, _hasEval, true);
  }

  get hasEval() {
    return __classPrivateFieldGet(this, _hasEval);
  }

  has(name) {
    return this.templateLocals.indexOf(name) !== -1;
  }

  get(name) {
    let index = this.usedTemplateLocals.indexOf(name);

    if (index !== -1) {
      return [index, true];
    }

    index = this.usedTemplateLocals.length;
    this.usedTemplateLocals.push(name);
    return [index, true];
  }

  getLocalsMap() {
    return dict();
  }

  getEvalInfo() {
    let locals = this.getLocalsMap();
    return Object.keys(locals).map(symbol => locals[symbol]);
  }

  allocateFree(name, resolution) {
    // If the name in question is an uppercase (i.e. angle-bracket) component invocation, run
    // the optional `customizeComponentName` function provided to the precompiler.
    if (resolution.resolution() === 39
    /* GetFreeAsComponentHead */
    && resolution.isAngleBracket && isUpperCase(name)) {
      name = this.customizeComponentName(name);
    }

    let index = this.upvars.indexOf(name);

    if (index !== -1) {
      return index;
    }

    index = this.upvars.length;
    this.upvars.push(name);
    return index;
  }

  allocateNamed(name) {
    let named = this.named[name];

    if (!named) {
      named = this.named[name] = this.allocate(name);
    }

    return named;
  }

  allocateBlock(name) {
    if (name === 'inverse') {
      name = 'else';
    }

    let block = this.blocks[name];

    if (!block) {
      block = this.blocks[name] = this.allocate(`&${name}`);
    }

    return block;
  }

  allocate(identifier) {
    this.symbols.push(identifier);
    return this.size++;
  }

}
_hasEval = new WeakMap();
export class BlockSymbolTable extends SymbolTable {
  constructor(parent, symbols, slots) {
    super();
    this.parent = parent;
    this.symbols = symbols;
    this.slots = slots;
  }

  get locals() {
    return this.symbols;
  }

  has(name) {
    return this.symbols.indexOf(name) !== -1 || this.parent.has(name);
  }

  get(name) {
    let slot = this.symbols.indexOf(name);
    return slot === -1 ? this.parent.get(name) : [this.slots[slot], false];
  }

  getLocalsMap() {
    let dict = this.parent.getLocalsMap();
    this.symbols.forEach(symbol => dict[symbol] = this.get(symbol)[0]);
    return dict;
  }

  getEvalInfo() {
    let locals = this.getLocalsMap();
    return Object.keys(locals).map(symbol => locals[symbol]);
  }

  setHasEval() {
    this.parent.setHasEval();
  }

  allocateFree(name, resolution) {
    return this.parent.allocateFree(name, resolution);
  }

  allocateNamed(name) {
    return this.parent.allocateNamed(name);
  }

  allocateBlock(name) {
    return this.parent.allocateBlock(name);
  }

  allocate(identifier) {
    return this.parent.allocate(identifier);
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,